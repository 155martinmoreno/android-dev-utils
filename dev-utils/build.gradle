import java.text.SimpleDateFormatapply plugin: 'com.android.library'/** * Returns the date formatted as "yyMMddHHmm" * * @return date string */def getBuildTime() {    def df = new SimpleDateFormat("yyMMddHHmm")    df.setTimeZone(TimeZone.getTimeZone("GMT-3"))    return df.format(new Date())}/** * Returns the current Branch name * * @return Branch name */def getBranchName() {    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()}/** *  Fetch the version according to git latest tag and "how far are we from last tag" * * @return array with (gitTag, gitHowFar, gitSha) */def getGitTag() {    def longVersionName = "git describe --tags --long".execute().text.trim()    return longVersionName.tokenize('-')//Looking for something like "v0.7-13-gd86e254"}def branchName = getBranchName()def (gitTag, gitHowFar, gitSha) = getGitTag()def (versionMajor, versionMinor) = gitTag.tokenize('.')//Looking for git tag like "v0.1"def buildStrversionMajor = versionMajor.subSequence(1, versionMajor.length())//Removes the leading "v"def versionStr = "v$versionMajor.$versionMinor.$gitHowFar"if (branchName == "master") {    buildStr = "(${getBuildTime()})"} else {    buildStr = "(${branchName}_${getBuildTime()})"}if (branchName == "master" && gitHowFar.toInteger() > 0) {    throw new BuildCancelledException("This commit is NOT tagged", new Throwable("The repo is $gitHowFar commits away from the last tag ($gitTag)"));}android {    signingConfigs {        debug {            keyAlias 'debug'            keyPassword 'qwerty'            storeFile file('../debug.keystore')            storePassword 'qwerty'        }    }    compileSdkVersion 22    buildToolsVersion "22.0.1"    defaultConfig {        minSdkVersion 8        targetSdkVersion 22        //noinspection GroovyAssignabilityCheck        versionCode versionMajor.toInteger() * 100000 + versionMinor.toInteger() * 10000        versionName "${versionStr}${buildStr}"    }    buildTypes {        release {            minifyEnabled false            shrinkResources false            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'            signingConfig signingConfigs.debug        }        debug {            signingConfig signingConfigs.debug        }        libraryVariants.all { variant ->            variant.outputs.each { output ->                output.outputFile = new File(output.outputFile.parent.toString(), output.outputFile.name.replace(".aar", "_${versionStr}.aar"))            }        }    }    compileOptions {        sourceCompatibility JavaVersion.VERSION_1_7        targetCompatibility JavaVersion.VERSION_1_7    }}dependencies {    compile fileTree(include: ['*.jar'], dir: 'libs')    compile 'com.android.support:support-annotations:20.0.0'    compile 'com.android.support:support-v4:22.1.0'}